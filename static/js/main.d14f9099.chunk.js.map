{"version":3,"sources":["images/Chuck.jpg","fetch_joke.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FetchJoke","React","useState","joke","setJoke","cat","setCat","name","setName","joketext","JSON","stringify","value","data","Blob","type","url","window","URL","createObjectURL","handleJoke","fetch","then","res","json","results","nameArray","split","nameresponse","r","Category","useEffect","className","src","Chuck","alt","TextField","id","onChange","e","target","label","variant","DropdownButton","onClick","title","map","i","Button","resp","result","href","download","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAe,G,MAAA,IAA0B,mC,QCsH1BA,MA9Gf,WAAqB,IAAD,EACMC,IAAMC,WADZ,mBACTC,EADS,KACHC,EADG,OAEIH,IAAMC,SAAqB,IAF/B,mBAETG,EAFS,KAEJC,EAFI,OAGML,IAAMC,SAAc,IAH1B,mBAGTK,EAHS,KAGHC,EAHG,KAMdC,EAAWC,KAAKC,UAAL,OAAeR,QAAf,IAAeA,OAAf,EAAeA,EAAMS,MAAMT,MACrCU,EAAO,IAAIC,KAAK,CAACL,GAAW,CAACM,KAAK,eAClCC,EAAIC,OAAOC,IAAIC,gBAAgBN,GAYtC,SAASO,IAGL,GAAS,IAANb,EACNc,MAAM,wDAEFC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAACG,GAAD,OACFrB,EAAQqB,UAIR,CACA,IAAMC,EAAYnB,EAAKoB,MAAM,KAC7BN,MAAM,iEAAiEK,EAAU,GAAG,aAAaA,EAAU,IAC1GJ,MAAK,SAAAM,GAAY,OAAEA,EAAaJ,UAChCF,MAAK,SAACO,GAAD,OACFzB,EAAQyB,OASpB,SAASC,IACLT,MAAM,qDACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAACG,GAAD,OAAYnB,EAAM,OAACmB,QAAD,IAACA,OAAD,EAACA,EAASb,UAgBtC,OANAX,IAAM8B,WAAU,WACZX,IACAU,MAGF,IAGE,8BAEI,+BAEI,qBAAKE,UAAU,QAAQC,IAAKC,EAAOC,IAAI,SACvC,mBAAGH,UAAU,OAAb,gBAAqB7B,QAArB,IAAqBA,OAArB,EAAqBA,EAAMS,MAAMT,OACjC,+BAGJ,cAACiC,EAAA,EAAD,CAAWJ,UAAU,OAAOK,GAAG,iBAAiBC,SAnEvD,SAAsBC,GAEf/B,EAAQ+B,EAAEC,OAAO5B,QAiEuD6B,MAAM,OAAOC,QAAQ,eAI7F,cAACC,EAAA,EAAD,CAAiBD,QAAQ,YAAYE,QAASd,EAAUO,GAAG,wBAAwBQ,MAAM,aAAzF,SAIKxC,EAAIyC,KAAI,SAAAC,GAAC,OACN,cAACC,EAAA,EAAD,CAASJ,QAAS,WAEbvB,MAAM,8CAA8C0B,EAAE,uBACtDzB,MAAK,SAAA2B,GAAI,OAAEA,EAAKzB,UAChBF,MAAK,SAAC4B,GACH9C,EAAQ8C,OALhB,SASIH,SAKR,cAACC,EAAA,EAAD,CAAQhB,UAAU,SAASY,QAASxB,EAApC,yBACA,mBAAGiB,GAAG,OAAMc,KAAMnC,EAAKoC,SAAUvC,EAAjC,4BC5FGwC,MAVf,WACE,OACE,qBAAKrB,UAAU,cAAf,SACC,cAAC,EAAD,OCKUsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d14f9099.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Chuck.60fc7a34.jpg\";","import React from \"react\";\r\nimport {Joke} from \"./joke\";\r\nimport{ Button, TextField }from \"@material-ui/core\";\r\nimport {Dropdown, DropdownButton} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { classicNameResolver } from \"typescript\";\r\nimport Chuck from \"./images/Chuck.jpg\";\r\n\r\nfunction FetchJoke(){\r\n    const [joke, setJoke]=React.useState<any>();\r\n    const [cat, setCat]=React.useState<Array<any>>([]);\r\n    const [name, setName]=React.useState<any>([]);\r\n    \r\n//starting states for category and joke\r\nconst joketext = JSON.stringify(joke?.value.joke)\r\n const data = new Blob([joketext], {type:'text/plain'});\r\n const url=window.URL.createObjectURL(data);\r\n function handlechange(e: any){\r\n        \r\n        setName(e.target.value);\r\n        \r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n//function  calls api and fetches a joke\r\nfunction handleJoke(){\r\n\r\n   \r\n    if(name==\"\"){\r\n fetch(\"https://api.icndb.com/jokes/random?escape=javascript\")\r\n    \r\n    .then(res=>res.json())\r\n    .then((results)=>(\r\n        setJoke(results)\r\n        \r\n    ))\r\n    }\r\n    else{\r\n        const nameArray  =name.split(\" \");\r\n        fetch(\"http://api.icndb.com/jokes/random?escape=javascript&firstName=\"+nameArray[0]+\"&lastName=\"+nameArray[1]+\"\")\r\n        .then(nameresponse=>nameresponse.json())\r\n        .then((r)=>(\r\n            setJoke(r)\r\n        ))\r\n\r\n    }\r\n\r\n   \r\n    \r\n  }\r\n //function fetches api and saves a category\r\nfunction Category(){\r\n    fetch(\"http://api.icndb.com/categories?escape=javascript\")\r\n    .then(res=>res.json())\r\n    .then((results)=>(setCat(results?.value)))\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    \r\n    \r\n\r\nReact.useEffect(()=>{\r\n    handleJoke();\r\n    Category();\r\n   \r\n    \r\n},[])\r\nreturn(\r\n    \r\n    <div >\r\n\r\n        <ul>    \r\n            \r\n            <img className=\"chuck\" src={Chuck} alt=\"none\" />\r\n            <p className=\"joke\">{joke?.value.joke}</p>\r\n            <form>\r\n    \r\n\r\n        <TextField className=\"name\" id=\"outlined-basic\" onChange={handlechange} label=\"Name\" variant=\"outlined\" />\r\n  </form>\r\n\r\n\r\n        <DropdownButton  variant=\"contained\" onClick={Category} id=\"dropdown-basic-button\" title=\"Categories\">\r\n            \r\n            \r\n            \r\n            {cat.map(i=>(\r\n                <Button  onClick={()=>{\r\n                    \r\n                     fetch(\"http://api.icndb.com/jokes/random?limitTo=[\"+i+\"]?escape=javascript\")\r\n                    .then(resp=>resp.json())\r\n                    .then((result)=>{\r\n                        setJoke(result)\r\n                    })\r\n                   \r\n                   \r\n                }}>{i}</Button>\r\n            ))}\r\n\r\n</DropdownButton>\r\n\r\n            <Button className=\"button\" onClick={handleJoke}>Random Joke</Button>\r\n            <a id=\"file\"href={url} download={data}>download</a>\r\n            \r\n           \r\n        \r\n        \r\n            \r\n        </ul>\r\n    </div>\r\n)\r\n}\r\nexport default FetchJoke;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FetchJoke from './fetch_joke';\n\n\nfunction App() {\n  return (\n    <div className=\"Rectangle-5\">\n     <FetchJoke/>\n  \n     \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}